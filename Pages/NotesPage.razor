@page "/"
@attribute [Authorize]
@using Microsoft.EntityFrameworkCore
@using SecureNote.Models
@using SecureNote.Data
@inject IDbContextFactory<AppDbContext> DbFactory

<PageTitle>Notes</PageTitle>

<h1>Notes</h1>

<div class="container">
    <div class="row">
        <div class="col-2">
            <button class="mb-2" @onclick="CreateNewNote">New Note</button>
            <ul class="list-group">
                @foreach (var item in notesList)
                {
                    <li class="@(item.Id == activeNoteId ? "list-group-item active" : "list-group-item")"
                        @onclick="() => Note = item">
                        @item.Title
                    </li>
                }
            </ul>
        </div>

        <div class="col">
            <form>
                <div class="mb-3">
                    <label class="form-label">Title</label>
                    <input type="text" class="form-control" @bind="note.Title">
                </div>
                <div class="mb-3">
                    <label class="form-label">Content</label>
                    <textarea class="form-control" rows="10" @bind="note.Content" />
                </div>
                <button class="btn btn-primary" @onclick="SaveNoteAsync">Save</button>
                <button class="btn btn-danger" @onclick="DeleteNoteAsync">Delete</button>
            </form>
        </div>
    </div>
</div>

@code
{
    Note note = new();
    Note Note
    {
        get => note;
        set
        {
            note = value;
            activeNoteId = note.Id;
        }
    }
    List<Note> notesList = new();
    Guid activeNoteId = new();

    protected override Task OnInitializedAsync()
    {
        GetAllNotesAsync();
        if (notesList.Count > 0)
        {
            activeNoteId = notesList[0].Id;
        }
        return base.OnInitializedAsync();
    }

    async Task SaveNoteAsync()
    {
        using var context = DbFactory.CreateDbContext();
        context.Add(note);
        await context.SaveChangesAsync();
    }

    void GetAllNotesAsync()
    {
        using var context = DbFactory.CreateDbContext();
        notesList = context.Notes.ToList();
    }

    void CreateNewNote()
    {
        Note = new();
    }

    async Task DeleteNoteAsync()
    {
        using var context = DbFactory.CreateDbContext();
        context.Remove(note);
        await context.SaveChangesAsync();
        notesList.Remove(note);
        Note = new();
    }
}